Push swap:

~ Mandatory :

----------------------------------
- Program name :
	push_swap
- File to send :
	Makefile, *.h, *.c
- Makefile :
	NAME, all, clean, fclean, re
- Arguments :
	stack a -> a list of int
- Allowed function :
	read, write, malloc, free, exit, all libft and function we code
----------------------------------

- All the standard input are going into the a stack (The first param is at the top of the stack).

- Take account that the arg can be a string that contain number:
	example : "1 34 27 12 76 42"
So need to convert it to multiple string to use it after.

- There is two stack : a & b 
	stack a : contain the standard input and the sorted list at the end.
	stack b : this pile is use to do operation to sort the list.

- We need to check if all the argument are correct,
an argument is incorrect if:
	the argument is not a number
	the argument do an int overflow/underflow
	the argument is duplicate

- Step to check if arguments are correct:
	split all the argument, and store them in a char **
	check that there is only digit and sign in the arguments
	convert every string to int
	check if there is duplication
if there is an error in one of this steps, write Error\n in standard error (stderr: 2)

- To split the arguments
	use count word an every argv
	then malloc a char **
	and then use split

- To sort the list, a set of instruction is given :
	- sa (swap a) : swap the 2 first element of the stack a,
	do nothing if there is one or zero element
	- sb (swap b) : swap the first 2 element of the stack b,
	do nothing if there is one or zero element
	- ss : sa & sb in the same time
	- pa (push a) : take the first element at the top of b
	and put it at the top of a
	- pb (push b) : take the first element at the top of a
	and put it at the top of b
	- ra (rotate a) : shift one position to the top all the element
	of the stack a, the first element become the last
	- rb (rotate b) : shift one position to the top all the element
	of the stack b, the first element become the last
	- rr : ra & rb in the same time
	- rra (reverse rotate a) : shift one position to the bottom all
	the element of the stack a, the last element become the first
	- rrb (reverse rotate b) : shift one position to the bottom all
	the element of the stack b, the last element become the first
	- rrr : rra & rrb in the same time

- For the code implementation :
	- make one folder for push swap and one for the checker,
	in every folder make one folder for the includes and
	one for the sources
	- make one Makefile that make other Makefile in the sub-directories
	- First, we need to implement error handling
	- make a test file to test argument input
	- implement the instruction , one function for each
	- implement the algoritm to sort the list
		every movment of the algoritm must be on of the given instruction

- Some things to do :
		split the argument into a char **
		count the number of char *
		create an int * with number of char * size
		fill it with atoi of char *
		check overflow/underflow
		check duplication
		put every index of the int * in a double linked list
		complete the libft with function for double linked list
		remove the bonus rule in libft and add the content to the "all" rule


~ Bonus :

The checker take in argument the same input as push swap,
so it's the argument to be sorted, and it take the standard input too,
so we can give it instruction to sort the list manually and he apply it,
or he take the output of push swap and execute it.
Once all the instruction are make, we need to check if it's sorted,
if it's sorted, we return "OK\n", if it's not sorted, we retrun "KO\n".

The checker take the stack to sort as the first parameter,
the second parameter is him listening to the standard input

	- Things to do :
		copy the error handler from push swap
		add the standard input as a parameter and store the standard input
			to do it, use gnl and put read on the standard input fd,
			then concatenate all the return line in one string
			and split them in a char **
		check if the input are correct:
			if a parameter is not a number,
			or if there is an int overflow/underflow,
			or if there is duplication,
			or if one of the instruction does not exist or is not well formulate
			we return "Error\n"

~ all :
	- make structure that store the string of instruction and one another
	to store there size (ex: ra (3), rb (3), rrr (4),..)
	- make define for stderr, stdin, stdout,... 

That's it for the moment :)
